# Description: Pack a given package to epkg
# Author: Christophe Romain <cromain@process-one.net>
# Depends: strip tar gzip zip
# Usage: export/epkg ejabberd
# vim: set foldmarker=#(,#) foldmethod=marker ts=4 sw=4 sts=4 et syntax=zsh:

_api_check "export/epkg package [arch]" $* || return $bad_use
_api_export $* || return $bad_use
local dist=$(_pkg_dist) epkg=$(_pkg_epkg $2) spec=$(_pkg_spec) arch=${2:-$CEAN_HOSTARCH}
local destepkg=${epkg/$arch/generic}  # assume package is cross-platform
local buildtar=$CEAN_ROOT/tmp/$dist.tgz

[ -e $epkg ] && {
    _warn "($pkg_name) package already available in ${epkg/$CEAN_ROOT/}"
    [ -f $buildtar ] && rm $buildtar
    return $success
}
[ -f $buildtar ] && {
    _info "($pkg_name) generating package ${epkg/$CEAN_ROOT/}..."
    _cd_workdir
    local el check
    tar zxf $buildtar
    # Strip beam and binaries, and define if generic or not
    (cd $dist; for el in bin lib; [ -d $el ] && { mkdir -p priv; cp -r $el priv })
    [ -d $dist/ebin ] && (cd $dist/ebin; echo 'beam_lib:strip_files(filelib:wildcard("*beam")), init:stop().' | erl >/dev/null) || _warn "($pkg_name) no ebin directory"
    for el in $(/bin/ls -1 $dist/**/* | xargs file | grep -E "ELF|bundle|executable")  # should work for linux osx bsd and windows
    do
        strip -S $el 2>/dev/null # does not cross-strip anyway
        destepkg=$epkg # package is platform specific
    done
    [ -e $destepkg ] && {
        _info "($pkg_name) using generic package"
    } || {
        # enforce unconsistant packages, try to clean a bit
        [ -d $dist/bin ] && mkdir $dist/priv 2>/dev/null
        [ -d $dist/lib ] && mkdir $dist/priv 2>/dev/null
        [ -d $dist/asn1 ] && mkdir $dist/priv 2>/dev/null
        [ -d $dist/contribs ] && mkdir $dist/priv 2>/dev/null
        [ -d $dist/c_src ] && mkdir $dist/src 2>/dev/null
        [ -d $dist/java_src ] && mkdir $dist/src 2>/dev/null
        [ -d $dist/examples ] && mkdir $dist/doc 2>/dev/null
        # Generate main ez and other archives
        [ -d $dist/src ] && { zip -9qr $dist.src.zip $dist/src >/dev/null; rm -Rf $dist/src }
        [ -d $dist/c_src ] && { zip -9qgr $dist.src.zip $dist/c_src >/dev/null; rm -Rf $dist/c_src }
        [ -d $dist/java_src ] && { zip -9qgr $dist.src.zip $dist/java_src >/dev/null; rm -Rf $dist/java_src }
        [ -d $dist/include ] && zip -9qgr $dist.src.zip $dist/include >/dev/null
        [ -d $dist/doc ] && { zip -9qr $dist.doc.zip $dist/doc >/dev/null; rm -Rf $dist/doc }
        [ -d $dist/examples ] && { zip -9qgr $dist.doc.zip $dist/examples >/dev/null; rm -Rf $dist/examples }
        [ -d $dist/priv ] && { zip -9qr $dist.priv.zip $dist/priv >/dev/null; rm -Rf $dist/priv }
        [ -d $dist/mibs ] && { zip -9qgr $dist.priv.zip $dist/mibs >/dev/null; rm -Rf $dist/mibs }
        [ -d $dist/bin ] && { zip -9qgr $dist.priv.zip $dist/bin >/dev/null; rm -Rf $dist/bin }
        [ -d $dist/lib ] && { zip -9qgr $dist.priv.zip $dist/lib >/dev/null; rm -Rf $dist/lib }
        [ -d $dist/asn1 ] && { zip -9qgr $dist.priv.zip $dist/asn1 >/dev/null; rm -Rf $dist/asn1 }
        [ -d $dist/contribs ] && { zip -9qgr $dist.priv.zip $dist/contribs >/dev/null; rm -Rf $dist/contribs }
        [ -d $dist/emacs ] && rm -Rf $dist/emacs
        zip -9qr $dist.ez $dist >/dev/null
        # Generate epkg and fill .pub records
        mkdir -p $destepkg:h
        tar cf $destepkg *zip(N) *ez
        [ -f $destepkg:h/$pkg_name.pub ] || cp $spec $destepkg:h
        [ -d $dist/priv ] && check="test" || check="good"
        echo 'cean_tools:update_pub("$destepkg:h/$pkg_name.pub", "$pkg_vsn", "$(date +%Y.%m%d)", "$check"), init:stop().' | erl >/dev/null
    }
    rm $buildtar
    _rm_workdir
} || {
    _error "($pkg_name) no installable binary (/tmp/$dist.tgz)"
    _info "  can not produce package"
    return $missing_package
}
[ -f $epkg ] || {
    # Dirty hack to create relative symlink to generic epkg when needed
    (mkdir -p $epkg:h
     cd $epkg:h
     for gen in ../../../generic/${ERLANG_VERSION%[A-D]*}/$pkg_name/*; [ -e $gen:t ] || ln -s $gen $gen:t)
}
